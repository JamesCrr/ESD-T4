version: "3"

networks:
  own-net:
    name: own-net
    driver: bridge

volumes:
  rabbitmq_data:
  frontend_node_modules:

services:
  # Remove this section before submitting!
  #######################################################################
  #######################################################################
  # backend:
  #   build: ./backend
  #   container_name: backend
  #   networks:
  #     - own-net
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./backend:/app
  #     - ./backend/node_modules:/app/node_modules

  # ping-backend:
  #   build: ./ping-backend
  #   container_name: ping-backend
  #   networks:
  #     - own-net
  #   # ports:
  #   #   - "4000:4000"
  #   volumes:
  #     - ./ping-backend:/app
  #     - /app/node_modules
  #   command: npm start
  #   depends_on:
  #     - frontend

  # # ONLY FOR TESTING SENDING TO RABBITMQ
  # sender:
  #   build: ./send-notification
  #   container_name: send-notification
  #   hostname: send-notification
  #   ports:
  #     - "5001:5001"
  #   networks:
  #     - own-net
  #   depends_on:
  #     - emailer
  #######################################################################
  #######################################################################

  # frontend:
  #   build: ./frontend
  #   container_name: frontend
  #   networks:
  #     - own-net
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   command: npm run dev
  #   depends_on:
  #     - backend

  # close_auction:
  #   build: ./close_auction
  #   container_name: close_auction  
  #   # restart: on-failure
  #   networks:
  #     - own-net
  #   ports:
  #     - "8888:8888"

  transactions_backend:
    build: ./transactions_backend
    container_name: transactionsbackend
    # restart: on-failure
    networks:
      - own-net
    ports:
      # - "8000:8000"
      - "8008:8008"

  bid_microservice:
    build: ./bid_microservice/service
    container_name: bid_microservice
    # restart: on-failure
    networks:
      - own-net
    ports:
      - "3012:3012"

  show_listing:
    build: ./show_listing
    container_name: show_listing
    # restart: on-failure
    networks:
      - own-net
    ports:
      - "3013:3013"

  notification-rabbitmq:
    image: rabbitmq:3-management
    container_name: notification-rabbitmq
    hostname: notification-rabbitmq
    # restart: on-failure
    networks:
      - own-net
    ports:
      - "5672:5672"
      - "15672:15672"
    # volumes:
    #   - ./notification-rabbitmq/conf.d:/etc/rabbitmq/conf.d
    volumes:
      - ./notification-rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./notification-rabbitmq/rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq

  emailer:
    build: ./emailer
    container_name: emailer
    hostname: emailer
    # restart: on-failure
    networks:
      - own-net
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - notification-rabbitmq

  listings:
    build: ./Listings
    container_name: listings
    # restart: on-failure
    ports:
      - "9999:9999"
    networks:
      - own-net
    volumes:
      - ./Listings/serviceAccountKeyListings.json:/usr/src/app/serviceAccountKeyListings.json

  bid-for-listing-complex:
    build: ./bid-for-listing-complex
    container_name: bid-for-listing-complex
    # restart: on-failure
    environment:
      - LISTING_SIMPLE_PORT_NUM=9999
      - BID_SIMPLE_PORT_NUM=3012
    ports:
      - "3015:3000"
    networks:
      - own-net
    depends_on:
      - notification-rabbitmq
      - listings
      - bid_microservice

  createlisting-complex:
    build: ./createlisting-complex
    container_name: createlisting-complex
    # restart: on-failure
    ports:
      - "3030:4099"
    networks:
      - own-net

  payment-complex:
    build: ./payment-complex
    container_name: payment-complex
    # restart: on-failure
    ports:
      - "3031:4098"
    networks:
      - own-net

  vue:
    build: ./esdUi
    container_name: esdUi
    # restart: on-failure
    ports:
      - "8080:8080"
    networks:
      - own-net
    environment:
      - NODE_ENV=production
    command: ["npm", "run", "serve", "--", "--port", "8080"]

  # #######################################
  # # Postgres: The database used by Kong
  # #######################################
  # kong-database:
  #   image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
  #   platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
  #   restart: always
  #   networks:
  #     - own-net
  #   environment:
  #     POSTGRES_DB: kong
  #     POSTGRES_USER: kong
  #     POSTGRES_PASSWORD: password
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - kong_data:/var/lib/postgresql/data

  # #######################################
  # # Kong database migration
  # #######################################
  # kong-migration:
  #   image: kong/kong-gateway:3.2.2.5 # tested 20231101
  #   platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
  #   command: "kong migrations bootstrap"
  #   restart: on-failure
  #   networks:
  #     - own-net
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: password
  #   depends_on:
  #     - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    # image: kong/kong-gateway:3.2.2.5 # tested 20231101
    build: ./kong-custom
    container_name: kong
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    # restart: always
    networks:
      - own-net
    volumes:
      - ./kong-custom/kong.yml:/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      # KONG_DATABASE: postgres
      # KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    # depends_on:
    #   - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
